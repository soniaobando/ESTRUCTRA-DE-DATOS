using System;
using System.Collections.Generic;

class Program
{
    // Función para verificar si los paréntesis en la expresión están balanceados
    static bool AreParenthesesBalanced(string expression)
    {
        // Crear una pila para almacenar los caracteres de apertura
        Stack<char> stack = new Stack<char>();
        
        // Recorremos cada carácter de la expresión
        foreach (char ch in expression)
        {
            // Si es un carácter de apertura, lo añadimos a la pila
            if (ch == '{' || ch == '(' || ch == '[')
            {
                stack.Push(ch);
            }
            // Si es un carácter de cierre
            else if (ch == '}' || ch == ')' || ch == ']')
            {
                // Verificamos si la pila está vacía o si no coincide con el último carácter de apertura
                if (stack.Count == 0 || !IsMatchingPair(stack.Pop(), ch))
                {
                    return false; // No está balanceado
                }
            }
        }
        
        // Si la pila está vacía, los paréntesis están balanceados
        return stack.Count == 0;
    }

    // Función para verificar si un par de paréntesis coinciden
    static bool IsMatchingPair(char opening, char closing)
    {
        return (opening == '{' && closing == '}') ||
               (opening == '(' && closing == ')') ||
               (opening == '[' && closing == ']');
    }

    // Función principal
    static void Main(string[] args)
    {
        string expression = "{7+(8*5)-[(9-7)+(4+1)]}";
        if (AreParenthesesBalanced(expression))
        {
            Console.WriteLine("La fórmula está balanceada.");
        }
        else
        {
            Console.WriteLine("La fórmula NO está balanceada.");
        }
    }
}
using System;

class TowersOfHanoi
{
    // Función para resolver el problema de las Torres de Hanoi
    static void SolveHanoi(int n, char source, char target, char auxiliary)
    {
        // Caso base: si hay un solo disco, simplemente moverlo
        if (n == 1)
        {
            Console.WriteLine($"Mover disco 1 de {source} a {target}");
            return;
        }

        // Mover los n-1 discos de la fuente a la auxiliar
        SolveHanoi(n - 1, source, auxiliary, target);

        // Mover el disco restante a la varilla objetivo
        Console.WriteLine($"Mover disco {n} de {source} a {target}");

        // Mover los n-1 discos de la auxiliar a la varilla objetivo
        SolveHanoi(n - 1, auxiliary, target, source);
    }

    // Función principal
    static void Main(string[] args)
    {
        int numDiscs = 3; // Puedes cambiar el número de discos
        Console.WriteLine($"Resolviendo Torres de Hanoi para {numDiscs} discos:");
        SolveHanoi(numDiscs, 'A', 'C', 'B'); // A, B y C son los nombres de las varillas
    }
}
